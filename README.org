#+OPTIONS: toc:nil
* StubIt
  Stubbing services in a docker environment should be simple. This
  makes it simpler. With a simple json structure one can define a HTTP
  endpoint and response data.
  
  This structure can either be read from file or POST-ed to StubIT over HTTP.

** Datastructure
   #+begin_src javascript 
     {
       "path": "/some/path", // required
       "method": "GET",      // One of av: GET/POST/PUT
       "requestBody": {},    // request object,  - optional
       "responseBody": {},   // response object, - optional
       "responseHeaders": {},// response headers - optional. Content-Type is json by default
       "status": 200         // default 200      - optional
     }
   #+end_src
   
** Mock a GET-request
   By sending the test-data
   #+begin_src http :pretty :exports code
     POST http://localhost:8081/testdata
     Content-Type: application/json

     {
       "path": "/bostotte/0000000",
       "method": "GET",
       "responseBody": {
         "status": false
       }
     }
   #+end_src

   
   Does the endpoint behave as defined:
   #+begin_src http :pretty :exports both
     GET http://localhost:8081/bostotte/0000000
   #+end_src

   #+RESULTS:
   : {
   :   "status": false
   : }

** Mock a GET-request with XML response
   
   *NB: If responseBody should be xml, must the XML document be inlined as a string with proper string-escaping.*
   
   By sending the test data
   #+begin_src http :exports code
     POST http://localhost:8081/testdata
     Content-Type: application/json

     {
       "path": "/kontaktregister/0000000",
       "method": "GET",
       "responseHeaders": {
         "Content-Type": "application/xml"
       },
       "responseBody": "xmldata"
     }
   #+end_src

   Does the endpoint behave as defined:

   #+begin_src http :exports both
   GET http://localhost:8081/kontaktregister/0000000
   #+end_src

   #+RESULTS:
   : HTTP/1.1 200 OK
   : X-Powered-By: Express
   : Content-Type: application/xml; charset=utf-8
   : Content-Length: 7
   : ETag: W/"7-Fb2JgSpskhIMKXddzveztg"
   : Date: Mon, 29 Jun 2015 11:44:49 GMT
   : Connection: keep-alive
   : 
   : xmldata

** Mock a GET-request with custom headers

   By sending the test data
   
   #+begin_src http  :exports code
     POST http://localhost:8081/testdata
     Content-Type: application/json

     {
       "path": "/bostotte/0000000",
       "method": "GET",
       "responseHeaders": {
         "Egendefinert-Header": "blablabla"
       },
       "responseBody": {
         "status": true
       }
     }

   #+end_src

   Does the endpoint behave as defined:
   
   #+begin_src http :exports both
   GET http://localhost:8081/bostotte/0000000
   #+end_src

   #+RESULTS:
   #+begin_example
   HTTP/1.1 200 OK
   X-Powered-By: Express
   Egendefinert-Header: blablabla
   Content-Type: application/json; charset=utf-8
   Content-Length: 15
   ETag: W/"f-KOwe7l9ASePE8hNQacHSyA"
   Date: Mon, 29 Jun 2015 11:44:58 GMT
   Connection: keep-alive
   
   {"status":true}
#+end_example

** Mock a failure and other status-codes
   By first defining that a request should fail:
   #+begin_src http :exports code
     POST http://localhost:8081/testdata
     Content-Type: application/json

     {
       "path": "/fail",
       "method": "GET",
       "status": 500,
       "responseBody": {
         "error": "I failed and responds with json"
       }
     }
   #+end_src

   Will it fail
   #+begin_src http :exports both
     GET http://localhost:8081/fail
   #+end_src

   #+RESULTS:
   : HTTP/1.1 500 Internal Server Error
   : X-Powered-By: Express
   : Content-Type: application/json; charset=utf-8
   : Content-Length: 43
   : ETag: W/"2b-bX7gq2bINhRhY43FoJPSgA"
   : Date: Fri, 14 Aug 2015 11:52:05 GMT
   : Connection: keep-alive
   : 
   : {"error":"I failed and responds with json"}

** Mock a POST-request
   
   #+begin_src http :pretty :exports code
   POST http://localhost:8081/testdata
   Content-Type: application/json

   {
     "path": "/postbar",
     "method": "POST",
     "requestBody": {
       "alfa": "alfa"
     },
     "responseBody": {
       "hello": "alfa"
     }
   }
   #+end_src

   
   =requestBody= is special, the field becomes a key for the request
   and must be POST-ed to get the response body.
   
   #+begin_src http :pretty :exports both
     POST http://localhost:8081/postbar
     Content-Type: application/json

     {"alfa": "alfa"}
   #+end_src

   #+RESULTS:
   : {
   :   "hello": "alfa"
   : }

** Mock a PUT-request
   #+begin_src http :pretty :exports code
   POST http://localhost:8081/testdata
   Content-Type: application/json

   {
     "path": "/postbar",
     "method": "PUT",
     "requestBody": {
       "beta": "beta"
     },
     "responseBody": {
       "hello": "beta"
     }
   }
   #+end_src

   
   =PUT= with =requestBody= is similar to =POST=
   
   #+begin_src http :pretty :exports both
     PUT http://localhost:8081/postbar
     Content-Type: application/json

     {"beta": "beta"}
   #+end_src

   #+RESULTS:
   : {
   :   "hello": "beta"
   : }

** Get all the testdata
   #+begin_src http :pretty :exports code
     GET http://localhost:8081/testdata
   #+end_src
